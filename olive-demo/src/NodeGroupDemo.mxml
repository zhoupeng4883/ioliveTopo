<?xml version="1.0" encoding="utf-8"?>
<!--******************************************************************************************
节点分组的Demo;
不指定Graph的groupNodeRenderer属性时，默认创建SimpleRectGroupedRenderer的实例;
在分组容器上双击时默认删除(拆开)此分组容器;如果不需要此项，请将graph的nodeDoubleClickUnGroup设置为false;
可通过指定SimpleRectGroupedRenderer的labelDirection指定其Label现实的位置
**********************************************************************************************-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="init()"
			   pageTitle="节点分组示例"
			   xmlns:olive="Library://com.olive.core/flex/olive">
	<fx:Script>
		<![CDATA[
			import com.iolive.topology.events.GraphLayoutEvent;
			import com.iolive.topology.events.GraphNodeEvent;
			import com.iolive.topology.events.GraphXMLModelEvent;
			import com.iolive.topology.model.DefaultGraphArc;
			import com.iolive.topology.model.DefaultGraphNode;
			import com.iolive.topology.renderers.AbstractNodeRenderer;
			import com.iolive.topology.renderers.ImageNodeRenderer;
			
			import mx.controls.Alert;
			
			import sample.SimpleXmlGraphModel;
			private var model:SimpleXmlGraphModel;
			private var groupCount:int = 0;
			
			private function init():void {
				model = new SimpleXmlGraphModel();
				model.url = "xml/IconDemo.xml";
				graph.model = model;
				model.addEventListener(GraphXMLModelEvent.XMLMODEL_ADDED,
					function(event:GraphXMLModelEvent):void{
						graph.runLayout();
					});
			}
			
			/**
			 * 布局动画播放完成时
			 */ 
			protected function graphLayoutFinishedHandler(event:GraphLayoutEvent):void
			{
				if(groupCount == 0){
				 	var pcGroup:Array = model.getNodesByName("座机");
					graph.groupNodes(pcGroup,"座机组");
					
					var phoneGroup:Array = model.getNodesByName("手机");
					graph.groupNodes(phoneGroup,"手机组");
					 
					var yun:Array = model.getNodesByName("云");
					graph.groupNodes(yun,"云组");
					groupCount++;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Style source="olive.css"/>
	<fx:Style source="defaults.css"/>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace olive "Library://com.olive.core/flex/olive";
		olive|SimpleRectGroupedRenderer{/** default Grouped Node Renderer*/
			backgroundAlpha:0.01;
			backgroundColor:#FFFFFF;
			borderColor:#0000FF;
			borderAlpha:0.6;
			borderStyle: dash;/*solid(实线)、none(无线)、dash(虚线)、hatch(毛线)*/
			borderThickness:2;
			titleLabelStyle:"titleLabelStyle"
		}
		.titleLabelStyle{
			color:#000FFF;
			fontSize:20;
		}
	</fx:Style>
	<fx:Declarations>
		<olive:SimpleRectGroupedRenderer id="groupRenderer" labelDirection="bottom"/>
		<olive:ImageNodeRenderer iconField="icon" id="nodeRenderer" showLabel="true"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		<olive:DefaultToolBar graph="{graph}" width="100%"/>
		<olive:OliveGraph id="graph" height="100%" width="100%"
						  groupNodeRenderer="{groupRenderer}" 
						  nodeRenderer="{nodeRenderer}"
						  graphLayoutFinished="graphLayoutFinishedHandler(event)"/>
		<olive:SearchBar graph="{graph}" width="100%"/>
	</s:VGroup>
</s:Application>