<?xml version="1.0" encoding="utf-8"?>
<!--******************************************************************************************
自定义告警渲染器，在节点上方一个状态灯标示当前设备运行状态的示例
节点渲染器见extend/renderer/LightNodeRenderer.mxml
**********************************************************************************************-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:olive="Library://com.olive.core/flex/olive"
			   creationComplete="init()" pageTitle="状态灯的节点渲染器示例"
			   viewSourceURL="srcview/index.html" xmlns:renderer="extend.renderer.*">
	<fx:Script>
		<![CDATA[
			import com.iolive.topology.events.GraphNodeEvent;
			import com.iolive.topology.model.IGraphNode;
			import com.iolive.topology.renderers.INodeRenderer;
			
			import flash.utils.setInterval;
			
			import sample.SimpleXmlGraphModel;
			private var model:SimpleXmlGraphModel;
			
			private function init():void {
				graph.setBackgroundColor(0x132239,1);
				model = new SimpleXmlGraphModel();
				model.url = "xml/jiaoHuanji.xml";
				graph.model = model;
				graph.arcRenderer.mouseOverEnabled = false;
				setInterval(function():void{
					alarmCreate();
				},5000);
			}
			
			/**
			 * 随机数模拟告警数量及等级
			 */ 
			public function alarmCreate():void{
				for(var i:int = 0, size:int = model.nodes.length; i < size; i ++){
					var node:IGraphNode = model.nodes[i];
					node.data.alarm_num = random(0,15);
					node.data.alarm_level = random(0,4);
					(graph.nodeToUI(node) as INodeRenderer).refreshUiFormData();
				}
			}
			
			/**
			 * 取两个数值之间随机数
			 */ 
			private function random(min:int,max:int):int{
				return Math.round(Math.random() * (max - min)) + min;  
			}
			
			protected function graph_nodeClickHandler(event:GraphNodeEvent):void
			{
				
			}
			
			protected function graph_clickHandler(event:MouseEvent):void
			{
				if(event.currentTarget is OliveGraph) {
					
				};
			}
			
		]]>
	</fx:Script>
	<fx:Style source="olive.css"/>
	<fx:Style source="defaults.css"/>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace olive "Library://com.olive.core/flex/olive";
		@namespace renderer "extend.renderer.*";
		renderer|LightNodeRenderer{
			normalBackgroundAlpha :0;
			normalBorderAlpha:0;
			overBackgroundAlpha:0;
			selectedBackgroundAlpha:0;
			color:#FFFFFF;
			fontWeight:bold;
		}
		olive|AbstractArcRenderer{
			normalLineThickness:2;
			normalLineColor:#08CB13;
			overLineThickness:2;
			overLineColor:#08CB13;
			selectedLineColor:#08CB13;
			selectedLineThickness:2;
			selectedGlowEnabled:false;
		}
	</fx:Style>
	<fx:Declarations>
		<renderer:LightNodeRenderer id="nodeRenderer" mouseEnabled="false"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		<olive:DefaultToolBar graph="{graph}" width="100%"/>
		<olive:OliveGraph click="graph_clickHandler(event)" nodeClick="graph_nodeClickHandler(event)" id="graph" height="100%" width="100%" nodeRenderer="{nodeRenderer}" />
		<olive:SearchBar graph="{graph}" width="100%"/>
	</s:VGroup>
</s:Application>