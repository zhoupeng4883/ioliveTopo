<?xml version="1.0" encoding="utf-8"?>
<!--******************************************************************************************
布局算法之网格布局算法，
当前iolive默认提供了按节点名称排序、按节点类型排序、按节点id排序、按节点连线数目排序、水平直线、垂直直线6种网格布局算法
如有特殊需要想自定义排序字段等，可联系作者获取代码扩展,QQ群：58683677
**********************************************************************************************-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:olive="Library://com.olive.core/flex/olive"
			   creationComplete="init()" pageTitle="网格布局示例"
			   viewSourceURL="srcview/index.html">
	<fx:Script>
		<![CDATA[
			import com.iolive.topology.consts.AlgorithmsTypeConst;
			import com.iolive.topology.events.GraphNodeEvent;
			import com.iolive.topology.events.GraphXMLModelEvent;
			import com.iolive.topology.model.DefaultGraphArc;
			import com.iolive.topology.model.DefaultGraphNode;
			import com.iolive.topology.renderers.AbstractNodeRenderer;
			import com.iolive.topology.renderers.ImageNodeRenderer;
			
			import extend.renderer.FxgNodeRenderer;
			
			import sample.SimpleXmlGraphModel;
			private var model:SimpleXmlGraphModel;
			
			private function init():void {
				model = new SimpleXmlGraphModel();
				model.url = "xml/StarLayoutAlgorithmDemo.xml";
				graph.model = model;
				graph.ignoreBounds = false;//是否在布局时自动滚动条以更多的视域呈现节点
				model.addEventListener(GraphXMLModelEvent.XMLMODEL_ADDED,
					function(event:GraphXMLModelEvent):void{
						graph.runLayoutByName(AlgorithmsTypeConst.GridLayoutAlgorithm_NAME_ALPHA);
					});
				
			}
			
			private function runLayout(layoutName:String):void{
				graph.runLayoutByName(layoutName);
			}
			
		]]>
	</fx:Script>
	<fx:Style source="olive.css"/>
	<fx:Style source="defaults.css"/>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:SkinnableContainer width="100%" skinClass="skins.control.DefaultControlBarSkin">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center"/>
			</s:layout>
			<s:CheckBox change="{graph.ignoreBounds = ignoreBoundsCheck.selected;graph.runLayout()}" id="ignoreBoundsCheck" label="视域扩展"/>
			<s:Button label="按节点名称首字母排序" click="runLayout(AlgorithmsTypeConst.GridLayoutAlgorithm_NAME_ALPHA)"/>
			<s:Button label="按节点ID排序" click="runLayout(AlgorithmsTypeConst.GridLayoutAlgorithm_NAME_BY_NODE_ID)"/>
			<s:Button label="按节点类型排序" click="runLayout(AlgorithmsTypeConst.GridLayoutAlgorithm_NAME_BY_NODE_TYPE)"/>
			<s:Button label="按节点连线数目排序" click="runLayout(AlgorithmsTypeConst.GridLayoutAlgorithm_NAME_BY_ARC_COUNT)"/>
			<s:Button label="水平直线" click="runLayout(AlgorithmsTypeConst.HorizontalLayoutAlgorithm)"/>
			<s:Button label="垂直直线" click="runLayout(AlgorithmsTypeConst.VerticalLayoutAlgorithm)"/>
		</s:SkinnableContainer>
		<olive:OliveGraph id="graph" height="100%" width="100%" nodeRenderer="{new FxgNodeRenderer()}"/>
	</s:VGroup>
</s:Application>