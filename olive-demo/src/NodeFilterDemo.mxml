<?xml version="1.0" encoding="utf-8"?>
<!--******************************************************************************************
节点滤镜效果演示
通过调用画布的setNodeFilter方法使用自定的滤镜
**********************************************************************************************-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:olive="Library://com.olive.core/flex/olive"
			   creationComplete="init()" pageTitle="节点自定义滤镜示例"
			   viewSourceURL="srcview/index.html">
	<fx:Script>
		<![CDATA[
			import com.iolive.topology.events.GraphXMLModelEvent;
			import com.iolive.topology.model.DefaultGraphArc;
			import com.iolive.topology.model.DefaultGraphNode;
			import com.iolive.topology.model.IGraphNode;
			import com.iolive.topology.renderers.AbstractNodeRenderer;
			import com.iolive.topology.renderers.ImageNodeRenderer;
			import com.iolive.topology.ui.MirageShaderFilter;
			
			import mx.graphics.GradientEntry;
			
			import sample.SimpleXmlGraphModel;
			
			import spark.filters.BevelFilter;
			import spark.filters.BlurFilter;
			import spark.filters.ColorMatrixFilter;
			import spark.filters.ConvolutionFilter;
			import spark.filters.DisplacementMapFilter;
			import spark.filters.DropShadowFilter;
			import spark.filters.GlowFilter;
			import spark.filters.GradientBevelFilter;
			import spark.filters.GradientGlowFilter;
			import spark.filters.ShaderFilter;
			private var model:SimpleXmlGraphModel;
			
			private function init():void {
				model = new SimpleXmlGraphModel();
				model.url = "xml/NodeFilterDemo.xml";
				graph.model = model;
				model.addEventListener(GraphXMLModelEvent.XMLMODEL_ADDED,
					function(event:GraphXMLModelEvent):void{
						graph.runLayout();
						
						
						//通过设置滤镜将图片变色
						var nodes:Array = model.getNodesByName("PC");
						var gray:spark.filters.ColorMatrixFilter = new 
						spark.filters.ColorMatrixFilter( [0.3930000066757202, 0.7689999938011169, 0.1889999955892563, 0, 0,
							0.3490000069141388, 0.6859999895095825, 0.1679999977350235, 0, 0,
							0.2720000147819519, 0.5339999794960022, 0.1309999972581863, 0, 0,
							0, 0, 0, 1, 0]);
						graph.setNodesFilter(nodes,[gray]);
						
						//通过设置投影滤镜将某节点投影突出
						var yun:IGraphNode = model.getNodeByName("云");
						var drop:spark.filters.DropShadowFilter = new spark.filters.DropShadowFilter(20,90,0x000000,0.75,32,32);
						graph.setNodesFilter([yun],[drop]);
						
						//通过设置glob滤镜将无线路由节点变红
						var wifi:IGraphNode = model.getNodeByName("无线路由");
						var glob:spark.filters.GlowFilter = new spark.filters.GlowFilter(0xFF0000,0.8,32,32);
						graph.setNodesFilter([wifi],[glob]);
						
						//设置文件服务器节点 3D滤镜
						var fileserver:IGraphNode = model.getNodeByName("文件服务器");
						var  bevel:spark.filters.BevelFilter = new spark.filters.BevelFilter(16,45,0x000000,0.75,0,1);
						graph.setNodesFilter([fileserver],[bevel]);
						
						//设置卫星电话发射器节点 模糊滤镜
						var wx:IGraphNode = model.getNodeByName("卫星电话发射器");
						var blur:spark.filters.BlurFilter = new spark.filters.BlurFilter();
						graph.setNodesFilter([wx],[blur]);
						
						//设置网关渐变滤镜
						var internet:IGraphNode = model.getNodeByName("internet网关");
						var gradient:spark.filters.GradientGlowFilter = new spark.filters.GradientGlowFilter();
						gradient.entries = [new GradientEntry(0x00FF00,0,1),new GradientEntry(0x0000FF,128,0.75),new GradientEntry(0xFF0000,255,0.75)];
						gradient.blurX=32;
						gradient.blurY=32;
						graph.setNodesFilter([internet],[gradient]);
						//使用clearNodesFilter方法清除滤镜效果
						
						//设置座机为倒影滤镜
					 	 var zj:Array = model.getNodesByName("座机");
						var mirage:MirageShaderFilter = new MirageShaderFilter();
						mirage.alpha = 0.5;
						mirage.y = 50;
						graph.setNodesFilter(zj,[mirage]); 
						//graph.setBackgroundColor(0x000000,1);
						
						//更多Flex滤镜效果请参见Google.com
						
						
					});
			}
			
		 
		]]>
	</fx:Script>
	<fx:Style source="olive.css"/>
	<fx:Style source="defaults.css"/>
	<s:VGroup width="100%" height="100%" gap="0">
		<olive:DefaultToolBar graph="{graph}" width="100%">
			<olive:filters>
				<olive:MirageShaderFilter alpha="0.5" height="50" y="30"/>
			</olive:filters>
		</olive:DefaultToolBar>
		<olive:OliveGraph id="graph" height="100%" width="100%" nodeRenderer="{new ImageNodeRenderer('icon')}"/>
		<olive:SearchBar graph="{graph}" width="100%"/>
	</s:VGroup>
</s:Application>